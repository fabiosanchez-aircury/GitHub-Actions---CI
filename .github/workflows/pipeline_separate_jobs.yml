name: Pipeline

on:
  pull_request:
    types: [ opened, synchronize, edited ]
  push:
    branches: [preview, master] # TODO: Remove master

jobs:

  check-wip:
    if: |
      (
        'edited' != github.event.pull_request.action
        && !startsWith(github.event.pull_request.title, 'WIP')
      )
      || (
        'edited' == github.event.pull_request.action
        && startsWith(github.event.pull_request.changes.title.from, 'WIP')
        && !startsWith(github.event.pull_request.title, 'WIP')
      )
    runs-on: ubuntu-20.04
    steps:
      - run: exit 0

  install:
    needs: check-wip
    name: "Install dependencies"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: '14' # should be 20 in link
      - name: Install dependencies 
        run: npm ci # npm install --no-audit --no-fund --no-optional

  lint:
    needs: [check-wip, install]
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: '14' # should be 20 in link
      - name: Install dependencies 
        run: npm ci # npm install --no-audit --no-fund --no-optional
      - name: Lint
        continue-on-error: true
        run: npm run eslint

  build:
    needs: [check-wip, install]
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: '14' # should be 20 in link
      - name: Install dependencies 
        run: npm ci # npm install --no-audit --no-fund --no-optional
      - name: Build
        run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  test:
    needs: [lint, build]
    name: Test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          cache: 'npm'
          node-version: '14' # should be 20 in link
      - name: Install dependencies 
        run: npm ci # npm install --no-audit --no-fund --no-optional
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      - name: Test
        run: npm test
    
  deploy:
    needs: [test]
    runs-on: ubuntu-20.04
    steps:
      - run: echo "not an actual deploy"

  db_test:
    runs-on: ubuntu-22.04
    env:
          PGHOST: localhost
          PGDATABASE: postgres
          PGUSERNAME: postgres
          PGPASSWORD: password
    steps:
      - shell: bash
        run: |
          echo "$(pg_config --bindir)" >> $GITHUB_PATH

          echo "Initializing database cluster..."

          # Convert backslashes to forward slashes in RUNNER_TEMP for Windows Git Bash
          export PGHOST="${RUNNER_TEMP//\\//}/postgres"
          export PGDATA="$PGHOST/pgdata"
          mkdir -p "$PGDATA"

          # initdb requires file for password in non-interactive mode
          export PWFILE="$RUNNER_TEMP/pwfile"
          echo "postgres" > $PWFILE
          initdb --pgdata="$PGDATA" --username="postgres" --pwfile="$PWFILE"

          echo "Starting PostgreSQL..."
          echo "unix_socket_directories = '$PGHOST'" >> "$PGDATA/postgresql.conf"
          pg_ctl start

          echo "Creating user..."
          psql --host "$PGHOST" --username="postgres" --dbname="postgres" --command="CREATE USER $PGUSERNAME PASSWORD '$PGPASSWORD'" --command="\du"

          echo "Creating database..."
          createdb --owner="$PGUSERNAME" --username="postgres" "$PGDATABASE"